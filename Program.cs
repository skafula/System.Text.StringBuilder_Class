using System.Text;

internal class Program
{
    private static void Main(string[] args)
    {
        //String vs StringBuilder: StringBuilder is mutable so it's value can be modified in the same object with the same referenc. So it is very practical when planning some or a lot
        //modifcation on it's value. While String is immutable if i plan to iterate over it and change it every time its really cost a lot as generating a new string object every time.
        //However String is more practical for Keys for example as HashCodes generated by the objects' value and as it is immutable it works.
        //StringBuilder's class is System.Text.StringBuilder

        //Important, that a stringbuilder object's default memory allocation is for 16 characters. 
        //So it has a Length and Capacity method. Length returns the length of the chracters in the object and Capacity returns the actual possible max Length of the object.
        //Also if the Length would be over the Capacity StringBuilder object doubles it's Capacity up to int32

        string[] strArr = { "This", "will", "be", "a", "really", "long", "sentence", "without", "any", "deep", "meaning." };

        StringBuilder sb = new StringBuilder(); //In the constructor there is a lot of possibilities to set for example the capacity. However MaxCapacity is readonly with over 2.1 billion char.

        foreach (string str in strArr )
        {
            sb.Append(str);
            sb.Append(" ");
            Console.WriteLine(sb + ", " + sb.Length + ", " + sb.Capacity);
        }

        StringBuilder sb2 = new StringBuilder(10);
        foreach (string str in strArr)
        {
            sb2.Append(str);
            sb2.Append(" ");
            Console.WriteLine(sb2 + ", " + sb2.Length + ", " + sb2.Capacity);
        }

        StringBuilder sb3 = new StringBuilder("RandomLength");
        foreach (string str in strArr)
        {
            sb3.Append(str);
            sb3.Append(" ");
            Console.WriteLine(sb3 + ", " + sb3.Length + ", " + sb3.Capacity);
        }

        StringBuilder sb4 = new StringBuilder("RandomLength", 14);
        foreach (string str in strArr)
        {
            sb4.Append(str);
            sb4.Append(" ");
            Console.WriteLine(sb4 + ", " + sb4.Length + ", " + sb4.Capacity);
        }

        //In SB it's possible to set the value of a char by indexer
        StringBuilder sb5 = new StringBuilder("I will change one char by indexer");
        sb5[10] = 'X';
        Console.WriteLine(sb5);

        //Properties: Length, [int] indexer, Capacity <- { get; set; } and MaxCapacity <- { get; }

        //Methods: Appnend(string value), Insert(int startIndex, string value), Remove(int startIndex, int count), Replace(string oldStr, string newStr), ToString() <- returns a string object with the value.
        Console.WriteLine(sb5.Remove(sb5.ToString().IndexOf('w'), 4));
    }
}